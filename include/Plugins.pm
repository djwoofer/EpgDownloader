package Plugins;
use strict;
use include::Misc;

=pod

=head1 NAME

Plugins

=head1 DESCRIPTION

Plugins package takes care of correct plugin usage. Constructor makes a list of existing plugins and saves correct paths.pm file if plugins were added or removed. This file should include existing plugin packages.

=head1 COPYRIGHT

This software is released under the GNU GPL version 2.

Author: Jakub Zalas <jakub@zalas.net>.

Date: march 2006

=cut

use constant INFO_MESSAGE => "#Do not edit this file directly. It is generated automagicly.\n#If you expierienced problems with plugin includes, just remove everything except the last line with \"1;\"\n\n";

sub new {
	my $class = shift;
	my $config = shift;
	my $self = {};

	$self->{'config'} = $config;
	$self->{'PLUGINS'} = [];

	my $dir = $self->{'config'}->get('PLUGINS_DIR');
	
	my $pluginsIncludes = INFO_MESSAGE;

	#checking directories
	opendir DIR, "$dir" or die("Plugins dir \"$dir\" not found!\n\t");

	#finding import Plugins
	while(defined(my $fileName = readdir(DIR))) {
		if( -d "$dir/$fileName" && -e "$dir/$fileName/$fileName.pm") {
			my $pluginsDir = $dir;
			$pluginsDir =~ s/^(.*)\/(.*?)$/$2/;
			push @{$self->{'PLUGINS'}}, $fileName;
			$pluginsIncludes.= "use ".$pluginsDir."::".$fileName."::".$fileName.";\n";
		}
	}
	closedir DIR;

	die("None plugins found!\n\t") if $#{$self->{'PLUGINS'}} == -1;
	
	#fill plugin includes if necessary
	#TODO: BUG: this only works if new plugin was installed, if one was removed it crashes
	my $overwrite = 0;
	
	open PLUGINS, "<paths.pm";
	my $prevLimiter = $/; $/ = undef; 
	my $oldPluginsIncludes = <PLUGINS>; $/ = $prevLimiter;
	close PLUGINS;

	my $tmp = $pluginsIncludes;
	while($tmp =~ /(.*)\n$/) {
		my $line = $1;
		if($oldPluginsIncludes !~ /$1\n/m) {
			$overwrite = 1;
			last;
		}
		
		$tmp =~ s/$line\n//;
	}
	
	if($overwrite==1) {
		open PLUGINS, ">paths.pm";
		print PLUGINS $pluginsIncludes."\n1;\n";
		close PLUGINS;
		Misc::message("PLUGINS","Reloaded plugin includes... Run me once more.");
		exit;
	}

	bless($self, $class);
	return $self;
}

sub get {
	my $self = shift;

	return $self->{'PLUGINS'};
}

sub printFound {
	my $self = shift;

	Misc::message(
		"PLUGINS",
		"Found plugins: ".join(", ",@{$self->get()}));

}

1;
